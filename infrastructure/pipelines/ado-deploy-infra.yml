# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: sqlserveradminpassword
  type: string




variables:
    # 'develop' or feature branches: DEV environment
    - template: ../../config-infra-dev.yml

trigger:
- none

pool:
  vmImage: $(ap_vm_image)

resources:
  repositories:
  - repository: "fta-Catalytics-workspace-publish"
    type: github
    name: $(gihub_repo_name)
    ref: workspace_publish
    endpoint: Azure   #provide the service connection name that connects to the github repo.

stages :
  - stage: Lint
    displayName: Lint and Preflight check
    jobs:
    - job: LintBicep
      displayName: Lint Bicep Code
      steps:
        - checkout: self
        - script: |
            az bicep build --file ./infrastructure/main.bicep
          name: LintBicepCode
          displayName: Run Bicep Linter

  - stage: PreflightValidation
    jobs:
    - job: ValidateBicepCode
      displayName: Validate Bicep Code
      steps:
        - task: AzureCli@2
          name: RunPreflightValidateion
          displayName: Run Preflight Validation
          inputs:
            azureSubscription: $(ado_service_connection_rg)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az deployment sub validate \
                --name $(Build.DefinitionName) \
                --template-file ./infrastructure/main.bicep \
                --location $(location) \
                --parameters location=$(location) prefix=$(prefix) postfix=$(postfix) env=$(environment) objectID=$(objectID) sqladministratorLoginPassword=${{ parameters.sqlserveradminpassword }}

  - stage: CheckOutBicepAndDeployAzureResources
    displayName: Deploy Azure Resources
    jobs:
    - deployment: DevDeployBicep
      displayName: Deploy Infra
      pool:
        vmImage: $(ap_vm_image)
      environment: $(environment)
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureCLI@2
              displayName: Running Dev Deployment
              inputs:
                azureSubscription: $(ado_service_connection_rg)
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  az --version
                  echo "deploying bicep..."
                  az deployment sub create \
                    --name $(Build.DefinitionName) \
                    --location $(location) \
                    --template-file ./infrastructure/main.bicep \
                    --parameters location=$(location) prefix=$(prefix) postfix=$(postfix) env=$(environment) objectID=$(objectID) sqladministratorLoginPassword=${{ parameters.sqlserveradminpassword }}

            - task: AzurePowerShell@5
              displayName: 'Azure PowerShell script: Deploy SQL Metadata'
              inputs:
                azureSubscription: $(ado_service_connection_rg)
                ScriptType: InlineScript
                Inline: |
                    $keyVaultname="$(keyVaultName)"
                    $keyVaultSecretnameSqlConnString="sqlconn-sampledb"
                    $scriptPath="$(System.DefaultWorkingDirectory)/src/sql_scripts/PostDeployment/create_metadata_tables.sql"
                    # Installing the SQLServer Module
                    
                    if (!(Get-Module -Name SQLServer)){
                        Write-Output "Installing the SQL Server Module"
                        Install-Module -Name SQLServer
                        Write-Output "Importing the SQL Server Module"
                        Import-Module SQLServer
                    }
                    
                    else{
                    Write-Output "SQL Server Module is present"
                    }
                    
                    
                    # Get the secret of the sql server Module
                    Write-Output "Fetching the key vault secret"
                    $sqldbConnString = Get-AzKeyVaultSecret -VaultName $keyVaultname -Name $keyVaultSecretnameSqlConnString -AsPlainText
                    
                    # Run the Scripts
                    Write-Output "Running the SQL Metadata creation script"
                    Invoke-SqlCmd -ConnectionString $sqldbConnString  -InputFile $scriptPath
                azurePowerShellVersion: LatestVersion


  - stage: SynapseArtifactsDeployment
    displayName: Synapse pipelines/notebook/linkedservices/dataset deployment
    jobs:
    - job: _job_SynapseArtifactsDeployment
      displayName: synapse artifacts deployment
      steps:
      - checkout: fta-Catalytics-workspace-publish
      - task: AzureSynapseWorkspace.synapsecicd-deploy.synapse-deploy.Synapse workspace deployment@1
        displayName: 'Synapse deployment task for workspace: synwfasthackpt1dev'
        inputs:
          TemplateFile: '$(System.DefaultWorkingDirectory)/synwfasthackpt1/TemplateForWorkspace.json'
          ParametersFile: '$(System.DefaultWorkingDirectory)/synwfasthackpt1/TemplateParametersForWorkspace.json'
          azureSubscription: 'Azure-ARM-Dev-SAPA'
          ResourceGroupName: $(resourceGroupName)
          TargetWorkspaceName: $(synapseWorkspace)
          OverrideArmParameters: '-workspaceName $(synapseWorkspace)            -LS_ADLS_G2_properties_typeProperties_url "https://$(dataLakeAccountName).dfs.core.windows.net"           -LS_AKV_properties_typeProperties_baseUrl "https://$(keyVaultName).vault.azure.net"            -LS_Blob_Storage_Staging_properties_typeProperties_serviceEndpoint "https://$(storageAccountName).blob.core.windows.net"            -Raw_To_Curated_Full_Load_properties_metadata_a365ComputeOptions_id "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Synapse/workspaces/$(synapseWorkspace)/bigDataPools/sparkpool"            -Raw_To_Curated_Full_Load_properties_metadata_a365ComputeOptions_endpoint "https://$(synapseWorkspace).dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool"            -Raw_To_Curated_Incremental_Load_properties_metadata_a365ComputeOptions_id "/subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroupName)/providers/Microsoft.Synapse/workspaces/$(synapseWorkspace)/bigDataPools/sparkpool"           -Raw_To_Curated_Incremental_Load_properties_metadata_a365ComputeOptions_endpoint "https://$(synapseWorkspace).dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool"            -PL_master_pipeline_properties_parameters_datalakeName_defaultValue $(dataLakeAccountName)' 